openapi: 3.0.2
info:
  contact:
    email: apiteam@swagger.io
    name: Swagger API Team
    url: http://swagger.io
  description: API di test vista nelle lezioni
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Pet Store API
  version: 1.0.0
servers:
- url: http://petstore.swagger.io/api
paths:
  /pets:
    get:
      description: |
        Returns all pets from the system that the user has access to
      operationId: findPets
      parameters:
      - description: tags to filter by
        explode: true
        in: query
        name: tags
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: maximum number of results to return
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                laurent_cats:
                  value:
                  - id: 1
                    name: Zaza
                    tag: cat
                  - id: 2
                    name: Tigresse
                    tag: cat
                  - id: 3
                    name: Maki
                    tag: cat
                  - id: 4
                    name: Toufik
                    tag: cat
              schema:
                items:
                  $ref: '#/components/schemas/Pet'
                type: array
          description: pet response
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      x-accepts: application/json
    post:
      description: Creates a new pet in the store.  Duplicates are allowed
      operationId: addPet
      requestBody:
        content:
          application/json:
            examples:
              tigresse:
                value:
                  name: Tigresse
                  tag: cat
            schema:
              $ref: '#/components/schemas/NewPet'
        description: Pet to add to the store
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                tigresse:
                  value:
                    id: 2
                    name: Tigresse
                    tag: cat
              schema:
                $ref: '#/components/schemas/Pet'
          description: pet response
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      x-contentType: application/json
      x-accepts: application/json
  /pets/{id}:
    delete:
      description: deletes a single pet based on the ID supplied
      operationId: deletePet
      parameters:
      - description: ID of pet to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "204":
          description: pet deleted
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      x-accepts: application/json
    get:
      description: |-
        Returns a user based on a single ID, if the user does not have
        access to the pet
      operationId: findPetById
      parameters:
      - description: ID of pet to fetch
        examples:
          zaza:
            value: 1
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                zaza:
                  value:
                    id: 1
                    name: Zaza
                    tag: cat
              schema:
                $ref: '#/components/schemas/Pet'
          description: pet response
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      x-accepts: application/json
components:
  schemas:
    Pet:
      allOf:
      - $ref: '#/components/schemas/NewPet'
      - $ref: '#/components/schemas/Pet_allOf'
    NewPet:
      example:
        name: name
        tag: tag
      properties:
        name:
          type: string
        tag:
          type: string
      required:
      - name
    Error:
      properties:
        code:
          format: int32
          type: integer
        message:
          type: string
      required:
      - code
      - message
    Pet_allOf:
      properties:
        id:
          format: int64
          type: integer
      required:
      - id
